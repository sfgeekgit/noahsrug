import csv
#import itertools

cust_filepath = './5784-speedrun/noahs-customers.csv'
orders_filepath = './5784-speedrun/noahs-orders.csv'
order_items_filepath = './5784-speedrun/noahs-orders_items.csv'

bagel_skus = ['BKY0542','BKY6777']  # just did with grep                        
coffee_sku = 'DLI7565'              # just did with grep

initials_to_check = 'DS'
year_to_check = '2017'

# fun puzzle! If this were ongoing real production, I'd have a database.
# But for this one off, I'll finish the python script, with some hard coded stuff, like above.

def main():
    c_uids = []

    
    # read customers csv file line by line 
    with open(cust_filepath, 'r') as f:
        reader = csv.reader(f)
        next(reader)  # Skip the header line
        for row in reader:

            full_name = row[1]
            first_name = full_name.split()[0]

            name_suffixes = ['Jr.', 'Sr.', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'Jr', 'Sr', '2nd']
            
            last_name = full_name.split()[-1]
            if last_name in name_suffixes:
                last_name = full_name.split()[-2]


            initials = ''.join([first_name[0], last_name[0]])
            if initials == initials_to_check:
                cuid = row[0]
                c_uids.append(cuid)
                #print(f'{initials} {cuid}  ------  {full_name}')
            

    #orders_to_check = []
    orders_to_check = {}

    # read orders csv file line by line 
    with open(orders_filepath, 'r') as f:
        reader = csv.reader(f)
        next(reader)  # Skip the header line
        for order in reader:
            if order[1] in c_uids:
                ordered = order[2]
                ordered_year = ordered.split('-')[0]
                if ordered_year == year_to_check:
                    order_id = order[0]
                    #orders_to_check.append(order_id) # actually let's use a dictionary
                    orders_to_check[order_id] = order[1]  # order_id : customer_id


                    # ugh.. at this point I really want to just do this with SQL. Do I have a database handy? 


                    # then a bunch of comments auto generated by my IDE.... Who doesn't want to write the code?

                    # I could use sqlite3, but I don't want to write the schema.
                    # I could use pandas, but I don't want to install it.
                    # I could use csv.DictReader, but I don't want to rewrite this code.
                    # I could use itertools, but I don't want to learn it.
                    # I could use a dictionary, but I don't want to write the code.
                    # I could use a list, but I don't want to write the code.
                    # I could use a set, but I don't want to write the code.
                    # I could use a tuple, but I don't want to write the code.
                    # I could use a class, but I don't want to write the code.
                    # I could use a function, but I don't want to write the code.
                    # I could use a generator, but I don't want to write the code.
                    # I could use a lambda, but I don't want to write the code.
                    # I could use a decorator, but I don't want to write the code.
                    # I could use a context manager, but I don't want to write the code.
                    # I could use a list comprehension, but I don't want to write the code.
                    # I could use a set comprehension, but I don't want to write the code.
                    # I could use a dictionary comprehension, but I don't want to write the code.
                    # I could use a generator expression, but I don't want to write the code.



                    # Anyway.... Human again.. back to it, I'll just write the code. Myself. LOL
                    # I could use sqlite3, but I don't want to write the schema.
                    # I could use pandas, but I don't want to install it.
                    # I could use csv.DictReader, but I don't want to rewrite this code.
                    # No! Stop it autocomplete!

                    # where was I... 

                    # I have a row from the orders csv file that matches a customer from the customers csv file
                    # need to check the items on the order, look for coffe and bagles


    jj = 0
    with open(order_items_filepath, 'r') as f:
        reader = csv.reader(f)
        next(reader)  # Skip the header line
        this_order = []
        prev_id = False
        for item_row in reader:

            this_id = item_row[0]
            if this_id != prev_id: # not air tight on first row, but will work for this one off.
                # noew order, should we check the prev? 
                if prev_id in orders_to_check:
                    # check items for coffee and bagles
                    if coffee_sku in this_order and any(bagel in this_order for bagel in bagel_skus):
                        print("\n\n Found one")
                        print(f'Order is {prev_id=}')
                        # so cust is 
                        cust_saught = orders_to_check[prev_id]
                        print(f'Customer is {cust_saught=}')
                        break
                        order_to_lookup = prev_id


                # reset for new order
                prev_id = this_id
                this_order = []
            # back to this item

            sku = item_row[1]
            #print (".", end="")
            #print(f'{sku=}')
            this_order.append(sku)
            #print(f'{item_row=}')






                    #jj += 1
                    #if jj > 10:
                    #    quit()
                        






'''

                    noahs-orders_items.csv
                    orderid,sku,qty,unit_price
                    1001,"COL5420",1,12.27
                    1002,"TOY0255",1,2.87
                    1003,"BKY6568",1,1.32
                    1003,"DLI9327",1,1.08
                    1003,"HOM3460",1,5.83
                    1003,"TOY2526",1,1.36
                    ...

                    noahs-products.csv 
                    sku,desc,wholesale_cost,dims_cm
                    "BKY0542","Caraway Bagel",1.10,14.7|9.0|3.2
                    "BKY6777","Sesame Bagel",0.99,19.7|19.3|2.3
                    "DLI7565","Coffee, Drip",1.42,16.6|7.4|7.4

                    

                '''


                
'''
head -2 noahs-orders.csv
orderid,customerid,ordered,shipped,items,total
1001,9576,2017-01-31 00:11:08,2017-01-31 20:45:00,,12.27

'''


if __name__ == "__main__":
    main()


